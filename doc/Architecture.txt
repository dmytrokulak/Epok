Application consists of three modules: Core+Domain, Persistance and Presentation.
Core contains infrastructure utilized accross the application. Core.Domain comprises abstractions for CQRS, Core.Providers deals with cross-cutting concerns (time, logging etc.) and Core.Utils provides utilities such as guard clauses and extensions methods for .NET types. Core should have no dependencies other than .NET BCL: that excludes any other projects and NuGet packages.
Domain reflects real-life domain where the application is intended to be applied. Each folder in Domain project represents a subdomain. The code in a subdomain is structered under CQRS: Commands, Entities, Events, Repositories, Quieres and Services. Command and query handlers are resolved by invokers in Core, deal with entities and depend on repositories and services. Command handlers also emit events through EventTransmitter: events are intended for event-sourcing (underpinning of reporting) and as points of extension of the application. Handlers cannot depend on other handlers. Services cannot not depend on other services and can depend on repositories but only if a service and a repository belong to the same subdomain. Hanlders, services and repositories may have providers injected. Domain project cannot depend on anything but .NET BCL and Core project: that excludes any other projects and NuGet packages.
Persistance is intended for communication with a database. It contains implementaion of repositoires and uses domain entities. Persistance module depends on Core+Domain module. It can also depend on 3rd party libraries when necessary.
Presentation passes data to the UI and depends on Core+Domain module. It can also depend on 3rd party libraries when necessary.