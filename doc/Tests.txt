Tests pack of the application consists of unit tests and system (integration) tests. 
The border between unit tests and integration tests lies in the presence of external dependencies such as database and web services. One may argue that some tests defined as "unit tests" are not really "unit" ones because they span multiple units (such as handler tests comprising mulitple services) or don't deal with functional units at all but are rather code analyzers.

1.Unit (modular) tests
1.1.0 Core tests: check logic in Core project
1.2.1 Domain services tests: check scenarios for each method in sub-domains services
1.2.2 Domain handler tests: check scenarios for command handlers in sub-domains
1.3.0 Pesistence tests: check mapping configuration and repositories with an im-memory database
1.4.0 Composition tests: check dependency injection and handlers invocation logic
1.5.0 Messaging tests: check event transmission with a message brocker (probably should be a part of system tests only)
2. Integration (system) tests
2.1. CRUD: to test the basic create\read\update\delete operations within a subdomain (Customers, Shops etc.)
2.2  Scenarios: to test complex real-time scenarios e.g. a sequence of production steps from an order been enacted to an order been completed